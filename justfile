import "justfile.local.just"
# THIS FILE IS AUTOGENERATED FROM FLAKEBOX CONFIGURATION


[private]
default:
  @just --list


# run `cargo build` on everything
build *ARGS="--all-targets":
  #!/usr/bin/env bash
  set -euo pipefail
  if [ ! -f Cargo.toml ]; then
    cd {{invocation_directory()}}
  fi
  cargo build {{ARGS}}


# run `cargo check` on everything
check *ARGS="--all-targets":
  #!/usr/bin/env bash
  set -euo pipefail
  if [ ! -f Cargo.toml ]; then
    cd {{invocation_directory()}}
  fi
  cargo check {{ARGS}}


# run all checks recommended before opening a PR
final-check: lint clippy
  #!/usr/bin/env bash
  set -euo pipefail
  if [ ! -f Cargo.toml ]; then
    cd {{invocation_directory()}}
  fi
  just test


# run code formatters
format:
  #!/usr/bin/env bash
  set -euo pipefail
  if [ ! -f Cargo.toml ]; then
    cd {{invocation_directory()}}
  fi

  # Format Rust code with cargo fmt
  echo "Formatting Rust files..."
  cargo fmt --all

  # Format Nix files with nixfmt
  echo "Formatting Nix files..."
  nix_files=$(git ls-files | grep "\.nix$" || true)
  if [ -n "$nix_files" ]; then
    nixfmt $nix_files || true
  else
    echo "  No Nix files found"
  fi

  # Format YAML files (remove trailing whitespace and ensure newline at EOF)
  echo "Formatting YAML files..."
  yaml_count=0
  for file in $(git ls-files | grep "\.ya\?ml$" || true); do
    if [ -f "$file" ]; then
      # Remove trailing whitespace
      sed -i 's/[[:space:]]*$//' "$file"
      # Ensure file ends with newline
      if [ -n "$(tail -c 1 "$file")" ]; then
        echo >> "$file"
      fi
      yaml_count=$((yaml_count + 1))
    fi
  done
  echo "  Formatted $yaml_count YAML files"

  # Format Markdown files (remove trailing whitespace and ensure newline at EOF)
  echo "Formatting Markdown files..."
  md_count=0
  for file in $(git ls-files | grep "\.md$" || true); do
    if [ -f "$file" ]; then
      # Remove trailing whitespace
      sed -i 's/[[:space:]]*$//' "$file"
      # Ensure file ends with newline
      if [ -n "$(tail -c 1 "$file")" ]; then
        echo >> "$file"
      fi
      md_count=$((md_count + 1))
    fi
  done
  echo "  Formatted $md_count Markdown files"

  # Format justfile itself (remove trailing whitespace)
  echo "Formatting justfile..."
  sed -i 's/[[:space:]]*$//' justfile || true
  echo "  Formatted justfile"

  echo "Formatting complete!"


# run lints (git pre-commit hook)
lint:
  #!/usr/bin/env bash
  set -euo pipefail
  env NO_STASH=true $(git rev-parse --git-common-dir)/hooks/pre-commit


# run tests
test: build
  #!/usr/bin/env bash
  set -euo pipefail
  if [ ! -f Cargo.toml ]; then
    cd {{invocation_directory()}}
  fi
  cargo test --release


# run and restart on changes
watch *ARGS="-x run":
  #!/usr/bin/env bash
  set -euo pipefail
  if [ ! -f Cargo.toml ]; then
    cd {{invocation_directory()}}
  fi
  env RUST_LOG=${RUST_LOG:-debug} cargo watch {{ARGS}}


# run `cargo clippy` on everything
clippy *ARGS="--locked --offline --all-targets":
  cargo clippy {{ARGS}} -- --deny warnings --allow deprecated

# run `cargo clippy --fix` on everything
clippy-fix *ARGS="--locked --offline --all-targets":
  cargo clippy {{ARGS}} --fix


# run `semgrep`
semgrep:
  env SEMGREP_ENABLE_VERSION_CHECK=0 \
    semgrep --error --no-rewrite-rule-ids --config .config/semgrep.yaml


# check typos
[no-exit-message]
typos *PARAMS:
  #!/usr/bin/env bash
  set -eo pipefail

  export FLAKEBOX_GIT_LS
  FLAKEBOX_GIT_LS="$(git ls-files)"
  export FLAKEBOX_GIT_LS_TEXT
  FLAKEBOX_GIT_LS_TEXT="$(echo "$FLAKEBOX_GIT_LS" | grep -v -E "^db/|\.(png|ods|jpg|jpeg|woff2|keystore|wasm|ttf|jar|ico)\$")"


  if ! echo "$FLAKEBOX_GIT_LS_TEXT" | typos {{PARAMS}} --file-list - --force-exclude ; then
    >&2 echo "Typos found: Valid new words can be added to '.typos.toml'"
    return 1
  fi

# fix all typos
[no-exit-message]
typos-fix-all:
  just typos -w

# THIS FILE IS AUTOGENERATED FROM FLAKEBOX CONFIGURATION
