name: Docker Hub Multi-Arch Publish

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to publish (e.g., v1.0.0)'
        required: false
        type: string

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKER_HUB_USERNAME }}/fmcd

jobs:
  build:
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            system: x86_64-linux
          - platform: linux/arm64
            system: aarch64-linux

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v14
        with:
          logger: pretty
          extra-conf: |
            experimental-features = nix-command flakes
            extra-platforms = aarch64-linux
            connect-timeout = 300
            stalled-download-timeout = 300

      - name: Setup QEMU for ARM64 builds
        if: matrix.system == 'aarch64-linux'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Setup Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@v8

      - name: Build OCI container for ${{ matrix.platform }}
        run: |
          # Build for the target system
          nix build .#packages.${{ matrix.system }}.oci

          # Save the archive path
          echo "OCI_ARCHIVE=$(readlink -f result)" >> $GITHUB_ENV

          # Save archive as artifact for manifest creation
          mkdir -p artifacts
          cp -L result artifacts/oci-${{ matrix.system }}.tar.gz

      - name: Upload OCI archive
        uses: actions/upload-artifact@v4
        with:
          name: oci-${{ matrix.system }}
          path: artifacts/oci-${{ matrix.system }}.tar.gz
          retention-days: 1

  push:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all OCI archives
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Determine version tag
        id: version
        run: |
          # Use manual input tag if provided, otherwise extract from git ref
          if [ -n "${{ inputs.tag }}" ]; then
            TAG="${{ inputs.tag }}"
            echo "Using manually provided tag: $TAG"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            TAG="${GITHUB_REF#refs/tags/}"
            echo "Using tag from push event: $TAG"
          else
            echo "Error: No tag provided or detected"
            echo "GitHub ref: ${{ github.ref }}"
            echo "Manual input: ${{ inputs.tag }}"
            exit 1
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Final tag: $TAG"

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ steps.version.outputs.tag }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.version.outputs.tag }}
            type=semver,pattern={{major}},value=${{ steps.version.outputs.tag }}
            type=raw,value=latest,enable=${{ startsWith(steps.version.outputs.tag, 'v') }}

      - name: Load and push multi-arch images
        run: |
          # Load each architecture image
          docker load < artifacts/oci-x86_64-linux/oci-x86_64-linux.tar.gz
          AMD64_IMAGE=$(docker images --format "{{.Repository}}:{{.Tag}}" | head -n 1)

          docker load < artifacts/oci-aarch64-linux/oci-aarch64-linux.tar.gz
          ARM64_IMAGE=$(docker images --format "{{.Repository}}:{{.Tag}}" | head -n 1)

          # Tag images with architecture suffix
          BASE_TAG="${{ env.IMAGE_NAME }}:build-${{ github.sha }}"
          docker tag $AMD64_IMAGE ${BASE_TAG}-amd64
          docker tag $ARM64_IMAGE ${BASE_TAG}-arm64

          # Push architecture-specific images
          docker push ${BASE_TAG}-amd64
          docker push ${BASE_TAG}-arm64

          # Create and push manifest for each tag
          for tag in $(echo "${{ steps.meta.outputs.tags }}" | tr '\n' ' '); do
            echo "Creating manifest for: $tag"
            docker manifest create $tag \
              --amend ${BASE_TAG}-amd64 \
              --amend ${BASE_TAG}-arm64

            docker manifest annotate $tag ${BASE_TAG}-amd64 --arch amd64
            docker manifest annotate $tag ${BASE_TAG}-arm64 --arch arm64

            docker manifest push $tag
          done

          # Clean up temporary tags
          docker manifest rm ${BASE_TAG}-amd64 || true
          docker manifest rm ${BASE_TAG}-arm64 || true
