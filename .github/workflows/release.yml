name: Release

permissions:
  contents: write

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'
  pull_request:

jobs:
  plan:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ github.ref_name }}
      publishing: ${{ !github.event.pull_request }}
    steps:
      - uses: actions/checkout@v4
      - name: Validate tag format
        if: github.event_name == 'push'
        run: |
          echo "Release tag: ${{ github.ref_name }}"

  build:
    name: Build ${{ matrix.target }}
    needs: plan
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: fmcd-linux-amd64
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: fmcd-linux-amd64-musl
          - target: aarch64-apple-darwin
            os: macos-latest
            name: fmcd-macos-aarch64
          - target: x86_64-apple-darwin
            os: macos-latest
            name: fmcd-macos-x86_64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: fmcd-windows-x86_64.exe

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install musl tools
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare artifact (Unix)
        if: runner.os != 'Windows'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ../../../${{ matrix.name }}.tar.gz fmcd
          cd ../../../
          sha256sum ${{ matrix.name }}.tar.gz > ${{ matrix.name }}.tar.gz.sha256

      - name: Prepare artifact (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cd target/${{ matrix.target }}/release
          Compress-Archive -Path fmcd.exe -DestinationPath ../../../${{ matrix.name }}.zip
          cd ../../../
          Get-FileHash ${{ matrix.name }}.zip -Algorithm SHA256 | Select-Object -ExpandProperty Hash > "${{ matrix.name }}.zip.sha256"

      - name: Upload artifacts (Unix)
        if: runner.os != 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: |
            ${{ matrix.name }}.tar.gz
            ${{ matrix.name }}.tar.gz.sha256

      - name: Upload artifacts (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: |
            ${{ matrix.name }}.zip
            ${{ matrix.name }}.zip.sha256

  release:
    needs: [plan, build]
    if: ${{ needs.plan.outputs.publishing == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: false

      - name: Prepare release files
        run: |
          mkdir release-files
          find artifacts -type f \( -name "*.tar.gz" -o -name "*.zip" -o -name "*.sha256" \) -exec mv {} release-files/ \;
          ls -la release-files/

      - name: Extract version from tag
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.plan.outputs.tag }}
          name: Release ${{ steps.version.outputs.version }}
          draft: false
          prerelease: ${{ contains(needs.plan.outputs.tag, '-') }}
          artifacts: "release-files/*"
          body: |
            ## fmcd ${{ steps.version.outputs.version }}

            ### Installation

            Download the appropriate binary for your platform from the assets below.

            #### Linux
            ```bash
            curl -L https://github.com/${{ github.repository }}/releases/download/${{ needs.plan.outputs.tag }}/fmcd-linux-amd64.tar.gz | tar xz
            chmod +x fmcd
            ./fmcd --version
            ```

            #### macOS
            ```bash
            curl -L https://github.com/${{ github.repository }}/releases/download/${{ needs.plan.outputs.tag }}/fmcd-macos-aarch64.tar.gz | tar xz
            chmod +x fmcd
            ./fmcd --version
            ```

            #### Windows
            Download and extract `fmcd-windows-x86_64.zip`
