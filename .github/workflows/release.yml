name: Release

permissions:
  contents: write

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'

jobs:
  plan:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ github.ref_name }}
      publishing: ${{ startsWith(github.ref, 'refs/tags/v') }}
    steps:
      - uses: actions/checkout@v4
      - name: Validate tag format
        if: github.event_name == 'push'
        run: |
          echo "Release tag: ${{ github.ref_name }}"

  build:
    name: Build ${{ matrix.target }}
    needs: plan
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: fmcd-linux-amd64
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: fmcd-linux-amd64-musl
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: fmcd-linux-aarch64

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.target == 'x86_64-unknown-linux-musl' || matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          if [ "${{ matrix.target }}" = "x86_64-unknown-linux-musl" ]; then
            # Install musl tools including C++ compiler
            sudo apt-get install -y musl-tools g++-multilib
            # Create symlinks for musl C++ compiler
            sudo ln -s /usr/bin/g++ /usr/bin/x86_64-linux-musl-g++ || true
          elif [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            # Install ARM64 cross-compilation tools including C++ compiler
            sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          fi

      - name: Build
        run: |
          if [ "${{ matrix.target }}" = "x86_64-unknown-linux-musl" ]; then
            # Set up musl target environment variables
            export CC_x86_64_unknown_linux_musl=musl-gcc
            export CXX_x86_64_unknown_linux_musl=x86_64-linux-musl-g++
            export CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER=musl-gcc
          elif [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            # Set up ARM64 target environment variables
            export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
            export CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc
            export CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++
            export AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar
          fi
          cargo build --release --target ${{ matrix.target }}

      - name: Prepare artifact
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ../../../${{ matrix.name }}.tar.gz fmcd
          cd ../../../
          sha256sum ${{ matrix.name }}.tar.gz > ${{ matrix.name }}.tar.gz.sha256

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: |
            ${{ matrix.name }}.tar.gz
            ${{ matrix.name }}.tar.gz.sha256

  release:
    needs: [plan, build]
    if: ${{ needs.plan.outputs.publishing == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: false

      - name: Prepare release files
        run: |
          mkdir release-files
          find artifacts -type f \( -name "*.tar.gz" -o -name "*.sha256" \) -exec mv {} release-files/ \;
          ls -la release-files/

      - name: Extract version from tag
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.plan.outputs.tag }}
          name: Release ${{ steps.version.outputs.version }}
          draft: false
          prerelease: ${{ contains(needs.plan.outputs.tag, '-') }}
          artifacts: "release-files/*"
          body: |
            ## fmcd ${{ steps.version.outputs.version }}

            ### Installation

            Download the appropriate binary for your platform from the assets below.

            #### Linux (AMD64)
            ```bash
            curl -L https://github.com/${{ github.repository }}/releases/download/${{ needs.plan.outputs.tag }}/fmcd-linux-amd64.tar.gz | tar xz
            chmod +x fmcd
            ./fmcd --version
            ```

            #### Linux (ARM64)
            ```bash
            curl -L https://github.com/${{ github.repository }}/releases/download/${{ needs.plan.outputs.tag }}/fmcd-linux-aarch64.tar.gz | tar xz
            chmod +x fmcd
            ./fmcd --version
            ```
